// This is an open source non-commercial project. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com

// ReSharper disable CheckNamespace
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable CommentTypo
// ReSharper disable FieldCanBeMadeReadOnly.Global
// ReSharper disable IdentifierTypo
// ReSharper disable InconsistentNaming
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable StringLiteralTypo
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedType.Global

/* ConsoleModeFlags.cs -- console mode options
   Ars Magna project, http://arsmagna.ru */

#region Using directives

using System;

#endregion

namespace AM.Win32;

/// <summary>
/// Console mode options.
/// </summary>
[Flags]
public enum ConsoleModeFlags
{
    /// <summary>
    /// CTRL+C is processed by the system and is not placed in the
    /// input buffer. If the input buffer is being read by ReadFile
    /// or ReadConsole, other control keys are processed by the system
    /// and are not returned in the ReadFile or ReadConsole buffer.
    /// If the ENABLE_LINE_INPUT mode is also enabled, backspace,
    /// carriage return, and linefeed characters are handled by the
    /// system.
    /// </summary>
    ENABLE_PROCESSED_INPUT = 0x0001,

    /// <summary>
    /// The ReadFile or ReadConsole function returns only
    /// when a carriage return character is read. If this mode
    /// is disabled, the functions return when one or more
    /// characters are available.
    /// </summary>
    ENABLE_LINE_INPUT = 0x0002,

    /// <summary>
    /// Characters read by the ReadFile or ReadConsole function are
    /// written to the active screen buffer as they are read. This mode
    /// can be used only if the ENABLE_LINE_INPUT mode is also enabled.
    /// </summary>
    ENABLE_ECHO_INPUT = 0x0004,

    /// <summary>
    /// User interactions that change the size of the console screen buffer
    /// are reported in the console's input buffer. Information about these
    /// events can be read from the input buffer by applications using the
    /// ReadConsoleInput function, but not by those using ReadFile or
    /// ReadConsole.
    /// </summary>
    ENABLE_WINDOW_INPUT = 0x0008,

    /// <summary>
    /// If the mouse pointer is within the borders of the console
    /// window and the window has the keyboard focus, mouse events
    /// generated by mouse movement and button presses are placed
    /// in the input buffer. These events are discarded by ReadFile
    /// or ReadConsole, even when this mode is enabled.
    /// </summary>
    ENABLE_MOUSE_INPUT = 0x0010,

    /// <summary>
    /// Characters written by the WriteFile or WriteConsole function
    /// or echoed by the ReadFile or ReadConsole function are parsed
    /// for ASCII control sequences, and the correct action is performed.
    /// Backspace, tab, bell, carriage return, and linefeed characters
    /// are processed.
    /// </summary>
    ENABLE_PROCESSED_OUTPUT = 0x0001,

    /// <summary>
    /// When writing with WriteFile or WriteConsole or echoing with
    /// ReadFile or ReadConsole, the cursor moves to the beginning
    /// of the next row when it reaches the end of the current row.
    /// This causes the rows displayed in the console window to scroll
    /// up automatically when the cursor advances beyond the last row
    /// in the window. It also causes the contents of the console screen
    /// buffer to scroll up (discarding the top row of the console
    /// screen buffer) when the cursor advances beyond the last row
    /// in the console screen buffer. If this mode is disabled, the
    /// last character in the row is overwritten with any subsequent
    /// characters.
    /// </summary>
    ENABLE_WRAP_AT_EOL_OUTPUT = 0x0002
}
